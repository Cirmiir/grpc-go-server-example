// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FibonacciServiceClient is the client API for FibonacciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciServiceClient interface {
	FibonacciSlice(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (FibonacciService_FibonacciSliceClient, error)
}

type fibonacciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciServiceClient(cc grpc.ClientConnInterface) FibonacciServiceClient {
	return &fibonacciServiceClient{cc}
}

func (c *fibonacciServiceClient) FibonacciSlice(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (FibonacciService_FibonacciSliceClient, error) {
	stream, err := c.cc.NewStream(ctx, &FibonacciService_ServiceDesc.Streams[0], "/main.FibonacciService/FibonacciSlice", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciServiceFibonacciSliceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FibonacciService_FibonacciSliceClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type fibonacciServiceFibonacciSliceClient struct {
	grpc.ClientStream
}

func (x *fibonacciServiceFibonacciSliceClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServiceServer is the server API for FibonacciService service.
// All implementations must embed UnimplementedFibonacciServiceServer
// for forward compatibility
type FibonacciServiceServer interface {
	FibonacciSlice(*FibonacciRequest, FibonacciService_FibonacciSliceServer) error
	mustEmbedUnimplementedFibonacciServiceServer()
}

// UnimplementedFibonacciServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFibonacciServiceServer struct {
}

func (UnimplementedFibonacciServiceServer) FibonacciSlice(*FibonacciRequest, FibonacciService_FibonacciSliceServer) error {
	return status.Errorf(codes.Unimplemented, "method FibonacciSlice not implemented")
}
func (UnimplementedFibonacciServiceServer) mustEmbedUnimplementedFibonacciServiceServer() {}

// UnsafeFibonacciServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciServiceServer will
// result in compilation errors.
type UnsafeFibonacciServiceServer interface {
	mustEmbedUnimplementedFibonacciServiceServer()
}

func RegisterFibonacciServiceServer(s grpc.ServiceRegistrar, srv FibonacciServiceServer) {
	s.RegisterService(&FibonacciService_ServiceDesc, srv)
}

func _FibonacciService_FibonacciSlice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServiceServer).FibonacciSlice(m, &fibonacciServiceFibonacciSliceServer{stream})
}

type FibonacciService_FibonacciSliceServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type fibonacciServiceFibonacciSliceServer struct {
	grpc.ServerStream
}

func (x *fibonacciServiceFibonacciSliceServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

// FibonacciService_ServiceDesc is the grpc.ServiceDesc for FibonacciService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonacciService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.FibonacciService",
	HandlerType: (*FibonacciServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FibonacciSlice",
			Handler:       _FibonacciService_FibonacciSlice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibonacci.proto",
}
